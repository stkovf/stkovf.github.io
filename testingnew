from inspect import iscoroutinefunction
from collections import namedtuple
import typing
import datetime
from flask import request, Flask
from werkzeug.datastructures import Headers
import re
import uuid
from sseclient import Event
from ujson import loads, dumps

id = str(uuid.uuid4())
class Registry:
    RegistryMethod = namedtuple("RegistryMethod", ["method", "link", "kwargs"])
    def __init__(self, last_pinged: dict[int, str], links: set):
        self.registry: list[Registry.RegistryMethod] = []
        self.last_pinged = last_pinged
        self.links = links
    def register(self, method: typing.Callable, link: str, kwargs):
        if iscoroutinefunction(method):
            async def new_method(*args, **kwargs):
                if not request.base_url in self.links:
                    self.links.add(request.base_url)
                self.last_pinged[request.base_url] = datetime.datetime.now().timestamp()
                method(*args, **kwargs)

            self.registry.append(self.RegistryMethod(method=new_method, link=link, kwargs=kwargs))
            return new_method
        
        def new_method(*args, **kwargs):
            if not request.base_url in self.links:
                self.links.add(request.base_url)
            self.last_pinged[request.base_url] = datetime.datetime.now().timestamp()
            method(*args, **kwargs)

        self.registry.append(self.RegistryMethod(method=new_method, link=link, kwargs=kwargs))
        return new_method
    def run(self, app: Flask):
        for method in self.registry:
            app.route(method.link, **method.kwargs)(method)

class ClaudeInput:
    @classmethod
    def from_openai(headers: Headers, data: dict):
        custom = Headers()
        json = {}
        add_header = lambda destination, source, new, old, map: destination.add_header(new, (map if map else lambda x: x)(src := (source.get(old) if source.get(old) else data.get(old)))) if src is not None else None
        add_header(custom, headers, "x-api-key", "Authorization", lambda x: s.group(1) if (s := re.match(r"(?:Bearer) (.)*", x) is not None and len(s.groups()) > 1) else x)
        custom.add_header("anthropic-version", "2023-06-01")
        custom.add_header("content-type", "application/json")
        json["model"] = data.get("model")
        json["metadata"] = {"user_id": None}
        json["messages"] = []
        for msg in data["messages"]:
            if msg["role"] == "developer" or msg["role"] == "system":
                json["messages"].append({"role": "system", "content": msg["content"]})
            elif msg["role"] == "user":
                json["messages"].append({"role": "user", "content": msg["content"]})
            elif msg["role"] == "assistant":
                if isinstance(msg["content"], str):
                    json["messages"].append({"role": "user", "content": msg["content"]})

                
        json["system"] = data.get("instructions") if data.get("instructions") is not None else ""
        json["stream"] = bool(data.get("stream"))
        json["temperature"] = data["temperature"]
        json["top_k"] = data.get("top_k")
        json["top_p"] = data.get("top_p")
        json["truncation"] = True
        json["max_token"] = (token := data.get("max_output_tokens")) if token else 100000
        return ClaudeInput(custom, json)
    def __init__(self, headers: Headers, json: dict):
        self.json = json
        self.headers = headers

class GptOutput:
    @classmethod
    def from_claude(headers: Headers, data: dict, status: str):
        custom = Headers()
        json = {}
        custom.add_header("anthropic-version", "2023-06-01")
        custom.add_header("content-type", "application/json")
        json["created_at"] = datetime.datetime.now().timestamp()
        json["id"] = data["id"]
        json["metadata"] = {}
        json["model"] = data["model"]
        json["system"] = data.get("instructions") if data.get("instructions") is not None else ""
        json["stream"] = bool(data.get("stream"))
        json["temperature"] = data["temperature"]
        json["top_k"] = data.get("top_k")
        json["top_p"] = data.get("top_p")
        json["incomplete_details"] = {["reason"]: data.get("stop_reason")} if data.get("stop_reason") is not None else None
        json["reasoning"] = None
        json["status"] = status
        json["tool_choice"] = "none"
        json["text"] = {"format": {"type": "text"}}
        json["tools"] = []
        json["usage"] = {"input_tokens": data["input_tokens"], "output_tokens": data["output_tokens"], "input_token_details": {"cached_tokens": "cache_read_input_tokens"}, "output_token_details": {"reasoning_tokens": 0}, "total_tokens": data["input_tokens"] + data["output_tokens"]}
        json["truncation"] = True
        return GptOutput(custom, json)
        
    def __init__(self, headers: Headers, json: dict):
        self.json = json
        self.headers = headers

class CompletionOutput:
    @classmethod
    def from_claude(event: Event, model: str, chunkid):
        json = {}
        data = loads(event.data)
        if event.event == "content_block_delta":
            json["choices"] = [
                {
                    "delta": {
                        "content": data["delta"]["text"],
                        "tool_calls": [],
                    },
                    "index": data["index"]
                }
            ]
            json["created"] = datetime.datetime.now().timestamp()
            json["id"] = chunkid
            json["model"] = model
            json["system_fingerprint"] = id
            json["object"] = "chat.completion.chunk"
        return CompletionOutput(json)
    def __init__(self, data):
        self.data = dumps(data)
